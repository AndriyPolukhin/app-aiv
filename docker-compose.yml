version: '3.8'

services:
    # PostgreSQL Database
    postgres:
        image: postgres:14-alpine
        container_name: ai-impact-postgres
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
            POSTGRES_DB: ${DB_NAME:-ai_impact}
            POSTGRES_HOST_AUTH_METHOD: trust
            POSTGRES_MAX_CONNECTIONS: 1000
        ports:
            - '${DB_PORT:-5432}:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - ai-impact-network

    # Backend API Service
    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: ai-impact-backend
        restart: unless-stopped
        ports:
            - '${API_PORT:-5000}:5000'
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            NODE_ENV: ${NODE_ENV:-development}
            DB_HOST: postgres
            DB_PORT: 5432
            DB_USER: ${DB_USER:-postgres}
            DB_PASSWORD: ${DB_PASSWORD:-postgres}
            DB_NAME: ${DB_NAME:-ai_impact}
            PORT: 5000
            CORS_ORIGINS: http://localhost:3000
        networks:
            - ai-impact-network

    # Data Processing Service
    data-processing:
        build:
            context: ./data-processing
            dockerfile: Dockerfile
        container_name: ai-impact-data-processing
        restart: unless-stopped
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            DB_HOST: postgres
            DB_PORT: 5432
            DB_USER: ${DB_USER:-postgres}
            DB_PASSWORD: ${DB_PASSWORD:-postgres}
            DB_NAME: ${DB_NAME:-ai_impact}
        volumes:
            - ./data:/app/data
        networks:
            - ai-impact-network

    # Frontend Client
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        container_name: ai-impact-frontend
        restart: unless-stopped
        ports:
            - '${FRONTEND_PORT:-3000}:3000'
        depends_on:
            - backend
        networks:
            - ai-impact-network

networks:
    ai-impact-network:
        driver: bridge

volumes:
    postgres_data:
